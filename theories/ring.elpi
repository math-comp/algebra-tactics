% Constructor [mk-ring-morphism Ty Morph ComR Env] takes a type [Ty],
% looks for a canonical [comRingType] (or at least [comSemiRingType])
% on it and returns it in [ComR] as well as packed in a rmorphism
% [Morph] (with the identity function), the result [Env] lists the
% appropriate [target-nmodule], [target-zmodule] and [target-semiring]
% If [field-mode] attempt to fill the field field, otherwise don't even attempt
pred mk-ring-morphism i:term, o:rmorphism, o:term, o:term, o:list prop.
mk-ring-morphism Ty rmorphism-nat {{ semiring_correct }} {{ target_nat }} Env :-
  coq.unify-eq Ty {{ nat }} ok, !,
  canonical-nat-nmodule NatNmodule,
  canonical-nat-semiring NatSemiRing,
  semiring-env SREnv,
  Env = [target-nmodule (global (const NatNmodule)),
         target-semiring (global (const NatSemiRing)) | SREnv].
mk-ring-morphism Ty rmorphism-N {{ semiring_correct }} {{ target_N }} Env :-
  coq.unify-eq Ty {{ N }} ok, !,
  canonical-N-nmodule NNmodule,
  canonical-N-semiring NSemiRing,
  semiring-env SREnv,
  Env = [target-nmodule (global (const NNmodule)),
         target-semiring (global (const NSemiRing)) | SREnv].
mk-ring-morphism Ty rmorphism-int {{ ring_correct }} {{ target_int }} Env :-
  coq.unify-eq Ty {{ int }} ok, !,
  canonical-int-nmodule IntNmodule,
  canonical-int-semiring IntSemiRing,
  canonical-int-zmodule IntZmodule,
  ring-env REnv,
  Env = [target-nmodule (global (const IntNmodule)),
         target-semiring (global (const IntSemiRing)),
         target-zmodule (global (const IntZmodule)) | REnv].
mk-ring-morphism Ty rmorphism-Z {{ ring_correct }} {{ target_Z }} Env :-
  coq.unify-eq Ty {{ Z }} ok, !,
  canonical-Z-nmodule ZNmodule,
  canonical-Z-semiring ZSemiRing,
  canonical-Z-zmodule ZZmodule,
  ring-env REnv,
  Env = [target-nmodule (global (const ZNmodule)),
         target-semiring (global (const ZSemiRing)),
         target-zmodule (global (const ZZmodule)) | REnv].
mk-ring-morphism Ty (rmorphism U V' SR R' UR' none (x\ x)) Lem CR Env :- !,
  std.assert-ok! (coq.unify-eq Ty {{ GRing.Nmodule.sort lp:U }})
                 "Cannot find a declared nmodType",
  std.assert-ok! (coq.unify-eq Ty {{ GRing.SemiRing.sort lp:SR }})
                 "Cannot find a declared semiRingType",
  if (coq.unify-eq Ty {{ GRing.Zmodule.sort lp:V }} ok,
      coq.unify-eq Ty {{ GRing.Ring.sort lp:R }} ok)
     % if the target is a ring
     (V' = some V, R' = some R,
      if (coq.unify-eq Ty {{ GRing.UnitRing.sort lp:UR }} ok)
         (UR' = some UR) (UR' = none),
      Lem = {{ ring_correct }},
      std.assert-ok! (coq.unify-eq Ty {{ GRing.ComRing.sort lp:CR' }})
                     "Cannot find a declared comRingType",
      CR = {{ target_other_comRing lp:CR' }},
      ring-env REnv,
      Env = [target-nmodule U, target-semiring SR, target-zmodule V | REnv])
     % if the target is a semiring
     (V' = none, R' = none, UR' = none,
      Lem = {{ semiring_correct }},
      std.assert-ok! (coq.unify-eq Ty {{ GRing.ComSemiRing.sort lp:CR' }})
                     "Cannot find a declared comSemiRingType",
      CR = {{ target_other_comSemiRing lp:CR' }},
      semiring-env SREnv,
      Env = [target-nmodule U, target-semiring SR | SREnv]).

pred mk-field-morphism
  i:term, o:rmorphism, o:term, o:term, o:list prop, o:list prop.
mk-field-morphism
  Ty (rmorphism U (some V) SR (some R) (some UR) (some F) (x\ x)) Lem Field
  [target-nmodule U, target-semiring SR, target-zmodule V | REnv]
  [field-mode, target-nmodule U, target-semiring SR, target-zmodule V | FEnv] :-
  std.do! [
    std.assert-ok! (coq.unify-eq Ty {{ GRing.Nmodule.sort lp:U }})
                   "Cannot find a declared nmodType",
    std.assert-ok! (coq.unify-eq Ty {{ GRing.Zmodule.sort lp:V }})
                   "Cannot find a declared zmodType",
    std.assert-ok! (coq.unify-eq Ty {{ GRing.SemiRing.sort lp:SR }})
                   "Cannot find a declared semiRingType",
    std.assert-ok! (coq.unify-eq Ty {{ GRing.Ring.sort lp:R }})
                   "Cannot find a declared ringType",
    std.assert-ok! (coq.unify-eq Ty {{ GRing.UnitRing.sort lp:UR }})
                   "Cannot find a declared unitRingType",
    std.assert-ok! (coq.unify-eq Ty {{ GRing.Field.sort lp:F }})
                   "Cannot find a declared fieldType",
    (coq.unify-eq Ty {{ Num.NumField.sort lp:Field }} ok,
     Lem = {{ numField_correct }};
     Field = F, Lem = {{ field_correct }}),
    ring-env REnv,
    field-env FEnv ].

pred semiring-env o:list prop.
semiring-env
  [(pi In\ quote.build.variable In {{ @PEX N lp:In }} :- !),
   (quote.build.zero {{ @PEO N }} :- !),
   (pi In\ quote.build.opp In {{ @PEopp N lp:In }} :- !),
   (pi In1 In2\ quote.build.add In1 In2 {{ @PEadd N lp:In1 lp:In2 }} :- !),
   (pi In1 In2\ quote.build.sub In1 In2 {{ @PEsub N lp:In1 lp:In2 }} :- !),
   (quote.build.one {{ @PEI N }} :- !),
   (pi In1 In2\ quote.build.mul In1 In2 {{ @PEmul N lp:In1 lp:In2 }} :- !),
   (pi In1 In2\
      quote.build.exp In1 In2 {{ @PEpow N lp:In1 lp:In2 }} :- !),
   (pi In\ quote.build.N-constant In {{ @PEc N lp:In }} :- !)] :- !.

pred ring-env o:list prop.
ring-env
  [(pi In\ quote.build.variable In {{ @PEX Z lp:In }} :- !),
   (quote.build.zero {{ @PEO Z }} :- !),
   (pi In\ quote.build.opp In {{ @PEopp Z lp:In }} :- !),
   (pi In1 In2\ quote.build.add In1 In2 {{ @PEadd Z lp:In1 lp:In2 }} :- !),
   (pi In1 In2\ quote.build.sub In1 In2 {{ @PEsub Z lp:In1 lp:In2 }} :- !),
   (quote.build.one {{ @PEI Z }} :- !),
   (pi In1 In2\ quote.build.mul In1 In2 {{ @PEmul Z lp:In1 lp:In2 }} :- !),
   (pi In1 In2\ quote.build.exp In1 In2 {{ @PEpow Z lp:In1 lp:In2 }} :- !),
   (pi In\ quote.build.Z-constant In {{ @PEc Z lp:In }} :- !),
   (quote.build.N-constant {{ N0 }} {{ @PEc Z Z0 }} :- !),
   (pi In\
      quote.build.N-constant {{ Npos lp:In }} {{ @PEc Z (Zpos lp:In) }} :- !)]
  :- !.

pred field-env o:list prop.
field-env
  [(pi In\ quote.build.variable In {{ @FEX Z lp:In }} :- !),
   (quote.build.zero {{ @FEO Z }} :- !),
   (pi In\ quote.build.opp In {{ @FEopp Z lp:In }} :- !),
   (pi In1 In2\ quote.build.add In1 In2 {{ @FEadd Z lp:In1 lp:In2 }} :- !),
   (pi In1 In2\ quote.build.sub In1 In2 {{ @FEsub Z lp:In1 lp:In2 }} :- !),
   (quote.build.one {{ @FEI Z }} :- !),
   (pi In1 In2\ quote.build.mul In1 In2 {{ @FEmul Z lp:In1 lp:In2 }} :- !),
   (pi In1 In2\ quote.build.exp In1 In2 {{ @FEpow Z lp:In1 lp:In2 }} :- !),
   (pi In\ quote.build.inv In {{ @FEinv Z lp:In }} :- !),
   (pi In\ quote.build.Z-constant In {{ @FEc Z lp:In }} :- !),
   (quote.build.N-constant {{ N0 }} {{ @FEc Z Z0 }} :- !),
   (pi In\
      quote.build.N-constant {{ Npos lp:In }} {{ @FEc Z (Zpos lp:In) }} :- !)]
  :- !.

pred if-verbose i:prop.
if-verbose P :- get-option "verbose" tt, !, P.
if-verbose _.

pred quote-arg i:term, i:rmorphism, o:list term, i:argument, o:pair term term.
quote-arg Ty C VM (trm Proof)
          (pr {{ (lp:RE1, lp:RE2, lp:PE1, lp:PE2) }} Proof) :- std.do! [
  @ltacfail! 0 => std.assert-ok!
    (coq.typecheck Proof {{ @eq lp:Ty lp:T1 lp:T2 }})
    "An argument is not a proof of equation of the expected type",
  quote.ring C T1 RE1 PE1 VM,
  quote.ring C T2 RE2 PE2 VM ].

pred list->conj i:list term, o:term.
list->conj [] {{ I }} :- !.
list->conj [P|PS] {{ conj lp:P lp:IS }} :- !, list->conj PS IS.

pred coq.ltac.call-with-error
  i:string, i:list argument, i:string, i:goal, o:list sealed-goal.
coq.ltac.call-with-error Tac Args _ G GS :- coq.ltac.call Tac Args G GS.
coq.ltac.call-with-error _ _ Err _ _ :- coq.ltac.fail 0 Err.

pred ring i:goal, o:list sealed-goal.
ring (goal _ _ P _ Args as G) GS :-
  attributes A, !,
  coq.parse-attributes A [att "verbose" bool] Opts, !,
  Opts => std.do! [
    @ltacfail! 0 => std.assert-ok!
      (coq.unify-eq P {{ @eq lp:Ty lp:T1 lp:T2 }})
      "The goal is not an equation",
    @ltacfail! 0 => mk-ring-morphism Ty C Lem ComRing Env,
    Env => std.time (
      std.unzip { std.map Args (quote-arg Ty C VM) } Lpe LpeProofs,
      quote.ring C T1 RE1 PE1 VM,
      quote.ring C T2 RE2 PE2 VM
    ) ReifTime,
    if-verbose (coq.say "Reification:" ReifTime "sec."),
    list-constant Ty VM VM',
    list-constant _ Lpe Lpe',
    std.assert-ok! (coq.typecheck Lpe' _) "Ill-typed term",
    list->conj LpeProofs LpeProofs',
    std.assert-ok! (coq.typecheck LpeProofs' _) "Ill-typed equations",
    std.time (
      coq.ltac.call-with-error "ring_reflection"
        [trm Lem, trm ComRing, trm VM', trm Lpe',
         trm RE1, trm RE2, trm PE1, trm PE2, trm LpeProofs']
        "Not a valid ring equation" G GS
    ) ReflTime,
    if-verbose (coq.say "Reflection:" ReflTime "sec."),
  ].

pred field i:goal, o:list sealed-goal.
field (goal _ _ P _ Args as G) GS :-
  attributes A, !,
  coq.parse-attributes A [att "verbose" bool] Opts, !,
  Opts => std.do! [
    @ltacfail! 0 => std.assert-ok!
      (coq.unify-eq P {{ @eq lp:Ty lp:T1 lp:T2 }})
      "The goal is not an equation",
    @ltacfail! 0 => mk-field-morphism Ty C Lem Field REnv FEnv,
    std.time (
      (REnv =>
        std.unzip { std.map Args (quote-arg Ty { rmorphism-rm-field C } VM) }
          Lpe LpeProofs),
      (FEnv => quote.ring C T1 RE1 PE1 VM),
      (FEnv => quote.ring C T2 RE2 PE2 VM)
    ) ReifTime,
    if-verbose (coq.say "Reification:" ReifTime "sec."),
    list-constant Ty VM VM',
    list-constant _ Lpe Lpe',
    std.assert-ok! (coq.typecheck Lpe' _) "Ill-typed term",
    list->conj LpeProofs LpeProofs',
    std.assert-ok! (coq.typecheck LpeProofs' _) "Ill-typed equations",
    std.time (
      coq.ltac.call-with-error "field_reflection"
        [trm Lem, trm Field, trm VM', trm Lpe',
         trm RE1, trm RE2, trm PE1, trm PE2, trm LpeProofs']
        "Not a valid field equation" G GS
    ) ReflTime,
    if-verbose (coq.say "Reflection:" ReflTime "sec."),
  ].
