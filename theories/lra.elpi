% [target-unitring R] asserts that the target carrier type has the unit ring
% instance [R].
pred target-unitring o:term.

% Type to contain the carrier type and structure instances attached to it
kind carrier type.
type carrier
  term ->        % Type
  term ->        % eqType
  term ->        % porderType
  term ->        % nmodType
  term ->        % zmodType
  term ->        % semiRingType
  term ->        % ringType
  term ->        % unitRingType
  option term -> % fieldType
  term ->        % realDomainType
  option term -> % realFieldType
  carrier.

pred carrier->rmorphism i:carrier, o:rmorphism.
carrier->rmorphism
  (carrier _ _ _ U V SR R UR F' _ _)
  (rmorphism U (some V) SR (some R) (some UR) F' (x\ x)) :- !.

pred carrier->type i:carrier, o:term.
carrier->type (carrier Ty _ _ _ _ _ _ _ _ _ _) Ty :- !.

pred carrier->eq i:carrier, o:term.
carrier->eq (carrier _ EQ _ _ _ _ _ _ _ _ _) EQ :- !.

pred carrier->porder i:carrier, o:term.
carrier->porder (carrier _ _ PO _ _ _ _ _ _ _ _) PO :- !.

pred carrier->ring i:carrier, o:term.
carrier->ring (carrier _ _ _ _ _ _ R _ _ _ _) R :- !.

pred carrier->realDomain i:carrier, o:term.
carrier->realDomain (carrier _ _ _ _ _ _ _ _ _ RD _) RD :- !.

pred carrier->realField i:carrier, o:term.
carrier->realField (carrier _ _ _ _ _ _ _ _ _ _ (some RF)) RF :- !.

pred mk-carrier i:term, o:carrier, o:list prop.
mk-carrier Ty (carrier Ty EQ PO U V SR R UR F' RD RF') Env :- std.do! [
  std.assert-ok! (coq.unify-eq Ty {{ Equality.sort lp:EQ }})
                 "Cannot find a declared eqType",
  std.assert-ok! (coq.unify-eq Ty {{ @Order.POrder.sort _ lp:PO }})
                 "Cannot find a declared porderType",
  std.assert-ok! (coq.unify-eq Ty {{ GRing.Nmodule.sort lp:U }})
                 "Cannot find a declared nmodType",
  std.assert-ok! (coq.unify-eq Ty {{ GRing.Zmodule.sort lp:V }})
                 "Cannot find a declared zmodType",
  std.assert-ok! (coq.unify-eq Ty {{ GRing.PzSemiRing.sort lp:SR }})
                 "Cannot find a declared semiRingType",
  std.assert-ok! (coq.unify-eq Ty {{ GRing.PzRing.sort lp:R }})
                 "Cannot find a declared ringType",
  std.assert-ok! (coq.unify-eq Ty {{ GRing.UnitRing.sort lp:UR }})
                 "Cannot find a declared unitRingType",
  std.assert-ok! (coq.unify-eq Ty {{ Num.RealDomain.sort lp:RD }})
                 "Cannot find a declared realDomainType",
  if (coq.unify-eq Ty {{ GRing.Field.sort lp:F }} ok,
      coq.unify-eq Ty {{ Num.RealField.sort lp:RF }} ok)
     (F' = some F, RF' = some RF,
      Env = [field-mode, target-nmodule U, target-semiring SR,
             target-zmodule V, target-unitring UR,
             (pi C C' In OutM Out VM\
                quote.exprw C In OutM Out VM :- !,
                  carrier->rmorphism C C', quote.lra.ring ff C' In OutM Out VM)])
     (F' = none, RF' = none,
      Env = [target-nmodule U, target-semiring SR,
             target-zmodule V, target-unitring UR,
             (pi C C' In OutM Out VM\
                quote.exprw C In OutM Out VM :- !,
                  carrier->rmorphism C C', quote.ring C' In OutM Out VM)])
].

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Parse goal (and hypotheses) to extract a realFieldType or realDomainType
% from (in)equalities it contains

% carrier type from a term of type bool
pred rfstr.bool i:term, o:carrier, o:list prop.
rfstr.bool {{ lp:Ty1 ==> lp:Ty2 }} C Env :- !,
  (rfstr.bool Ty2 C Env; rfstr.bool Ty1 C Env).
rfstr.bool {{ ~~ lp:Ty }} C Env :- !, rfstr.bool Ty C Env.
rfstr.bool {{ lp:Ty1 && lp:Ty2 }} C Env :- !,
  (rfstr.bool Ty2 C Env; rfstr.bool Ty1 C Env).
rfstr.bool {{ lp:Ty1 || lp:Ty2 }} C Env :- !,
  (rfstr.bool Ty2 C Env; rfstr.bool Ty1 C Env).
rfstr.bool {{ @Order.le _ lp:Ty _ _ }} C Env :- !,
  mk-carrier {{ @Order.POrder.sort _ lp:Ty }} C Env.
rfstr.bool {{ @Order.lt _ lp:Ty _ _ }} C Env :- !,
  mk-carrier {{ @Order.POrder.sort _ lp:Ty }} C Env.

% carrier type from a term of type Prop
pred rfstr.prop i:term, o:carrier, o:list prop.
rfstr.prop {{ lp:Ty1 -> lp:Ty2 }} C Env :- !,
  (rfstr.prop Ty2 C Env; rfstr.prop Ty1 C Env).
rfstr.prop {{ iff lp:Ty1 lp:Ty2 }} C Env :- !,
  (rfstr.prop Ty2 C Env; rfstr.prop Ty1 C Env).
rfstr.prop {{ ~ lp:Type }} C Env :- !, rfstr.prop Type C Env.
rfstr.prop {{ lp:Ty1 /\ lp:Ty2 }} C Env :- !,
  (rfstr.prop Ty2 C Env; rfstr.prop Ty1 C Env).
rfstr.prop {{ lp:Ty1 \/ lp:Ty2 }} C Env :- !,
  (rfstr.prop Ty2 C Env; rfstr.prop Ty1 C Env).
rfstr.prop {{ is_true lp:Ty }} C Env :- !, rfstr.bool Ty C Env.
rfstr.prop {{ @eq lp:Bool lp:Ty1 lp:Ty2 }} C Env :-
  coq.unify-eq Bool {{ bool }} ok, !,
  (rfstr.bool Ty2 C Env; rfstr.bool Ty1 C Env).
rfstr.prop {{ @eq lp:Ty _ _ }} C Env :- !, mk-carrier Ty C Env.

pred rfstr.hyps i:list prop, o:carrier, o:list prop.
rfstr.hyps [decl _ _ H|_] C Env :- rfstr.prop H C Env.
rfstr.hyps [_|Ctx] C Env :- rfstr.hyps Ctx C Env.

pred rfstr i:list prop, i:term, o:carrier, o:list prop.
rfstr _ Type C Env :- rfstr.prop Type C Env, !.
rfstr Ctx _ C Env :- rfstr.hyps {std.rev Ctx} C Env, !.
rfstr _ _ _ _ :- coq.ltac.fail 0 "Cannot find a realDomainType".

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Reification procedure

namespace quote {

% Constructors for reified terms

build.variable In {{ @PEX Q lp:In }} :- !.

build.zero {{ @PEc Q (Qmake Z0 1) }} :- !.

build.opp In {{ @PEopp Q lp:In }} :- !.

build.add In1 In2 {{ @PEadd Q lp:In1 lp:In2 }} :- !.

build.sub In1 In2 {{ @PEsub Q lp:In1 lp:In2 }} :- !.

build.one {{ @PEc Q (Qmake (Zpos xH) 1) }} :- !.

build.mul In1 In2 {{ @PEmul Q lp:In1 lp:In2 }} :- !.

build.exp In1 In2 {{ @PEpow Q lp:In1 lp:In2 }} :- !.

build.Z-constant In {{ @PEc Q (Qmake lp:In 1) }} :- !.

build.N-constant {{ N0 }} {{ @PEc Q (Qmake 0 1) }} :- !.
build.N-constant {{ Npos lp:In }} {{ @PEc Q (Qmake (Zpos lp:In) 1) }} :- !.

pred build.invZ-constant i:bool, i:term, o:term.
build.invZ-constant ff In {{ @PEc Q (Qmake lp:In 1) }} :- !.
build.invZ-constant tt {{ Z0 }} {{ @PEc Q (Qmake 0 1) }} :- !.
build.invZ-constant tt {{ Zpos lp:In }} {{ @PEc Q (Qmake 1 lp:In) }} :- !.
build.invZ-constant tt {{ Zneg lp:In }} {{ @PEc Q (Qmake (-1) lp:In) }} :- !.

pred build.invN-constant i:bool, i:term, o:term.
build.invN-constant _ {{ N0 }} {{ @PEc Q (Qmake Z0 1) }} :- !.
build.invN-constant ff {{ Npos lp:In }} {{ @PEc Q (Qmake (Zpos lp:In) 1) }} :-
  ground-pos In, !.
build.invN-constant tt {{ Npos lp:In }} {{ @PEc Q (Qmake 1 lp:In) }} :-
  ground-pos In, !.

% GFormula constructors
pred build.implb i:term, i:term, o:term.
build.implb {{ X _ lp:In1 }} {{ X _ lp:In2 }}
            {{ X isBool (lp:In1 ==> lp:In2) }} :- !.
build.implb In1 In2 {{ IMPL lp:In1 None lp:In2 }} :- !.

pred build.andb i:term, i:term, o:term.
build.andb {{ X _ lp:In1 }} {{ X _ lp:In2 }}
           {{ X isBool (lp:In1 && lp:In2) }} :- !.
build.andb In1 In2 {{ AND lp:In1 lp:In2 }} :- !.

pred build.orb i:term, i:term, o:term.
build.orb {{ X _ lp:In1 }} {{ X _ lp:In2 }}
          {{ X isBool (lp:In1 || lp:In2) }} :- !.
build.orb In1 In2 {{ OR lp:In1 lp:In2 }} :- !.

pred build.negb i:term, o:term.
build.negb {{ X _ lp:In1 }} {{ X isBool (~~ lp:In1) }} :- !.
build.negb In {{ NOT lp:In }} :- !.

pred build.implp i:term, i:term, o:term.
build.implp {{ X _ lp:In1 }} {{ X _ lp:In2 }}
            {{ X isProp (lp:In1 -> lp:In2) }} :- !.
build.implp In1 In2 {{ IMPL lp:In1 None lp:In2 }} :- !.

pred build.iffp i:term, i:term, o:term.
build.iffp {{ X _ lp:In1 }} {{ X _ lp:In2 }}
           {{ X isProp (iff lp:In1 lp:In2) }} :- !.
build.iffp In1 In2 {{ IFF lp:In1 lp:In2 }} :- !.

pred build.andp i:term, i:term, o:term.
build.andp {{ X _ lp:In1 }} {{ X _ lp:In2 }}
           {{ X isProp (lp:In1 /\ lp:In2) }} :- !.
build.andp In1 In2 {{ AND lp:In1 lp:In2 }} :- !.

pred build.orp i:term, i:term, o:term.
build.orp {{ X _ lp:In1 }} {{ X _ lp:In2 }}
          {{ X isProp (lp:In1 \/ lp:In2) }} :- !.
build.orp In1 In2 {{ OR lp:In1 lp:In2 }} :- !.

pred build.negp i:term, o:term.
build.negp {{ X _ lp:In1 }} {{ X isProp (~ lp:In1) }} :- !.
build.negp In {{ NOT lp:In }} :- !.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

namespace lra {

pred cond-inv i:bool, i:term, o:term.
cond-inv ff In In :- !.
cond-inv tt In {{ @GRing.inv lp:TUR lp:In }} :- !, target-unitring TUR.

% [quote.lra.nmod Inv C Input OutM Out VM] reifies an expression [Input]
% under the additive morphism [C]
% - [Inv] if [tt] then [Out] encodes the multiplicative inverse of [Input],
% - [C] stores instances on the carrier type and the additive function from it,
% - [Input] is a term of the carrier type,
% - [OutM] is a reified terms of [Input] of type [RExpr C],
%   it is such that [Meval OutM] is exactly [Input],
% - [Out] is a reified term of [Input] built by build.*,
%   it has morphisms pushed inward such that the eval of [Out]
%   is [Lra.Mnorm OutM]
% - [VM] is a variable map.
pred nmod i:bool, i:additive, i:term, o:term, o:term, o:list term.
% _ : _
nmod Inv C {{ lp:In : _ }} OutM Out VM :- !,
  nmod Inv C In OutM Out VM.
% 0%R
nmod _ (additive U _ _) {{ @GRing.zero lp:U' }} {{ @M0 lp:U }} Out _ :-
  coq.unify-eq U U' ok, !,
  build.zero Out.
% +%R
nmod ff (additive U _ _ as C) {{ @GRing.add lp:U' lp:In1 lp:In2 }}
     {{ @MAdd lp:U lp:OutM1 lp:OutM2 }} Out VM :-
  coq.unify-eq U U' ok, !,
  nmod ff C In1 OutM1 Out1 VM, !,
  nmod ff C In2 OutM2 Out2 VM, !,
  build.add Out1 Out2 Out.
% (_ *+ _)%R
nmod Inv (additive U _ _ as C) {{ @GRing.natmul lp:U' lp:In1 lp:In2 }}
     {{ @MMuln lp:U lp:OutM1 lp:OutM2 }} Out VM :-
  coq.unify-eq U U' ok, !,
  nmod Inv C In1 OutM1 Out1 VM, !,
  ring Inv rmorphism-nat In2 OutM2 Out2 VM, !,
  build.mul Out1 Out2 Out.
% -%R
nmod Inv (additive _ (some U) _ as C) {{ @GRing.opp lp:U' lp:In1 }}
     {{ @MOpp lp:U lp:OutM1 }} Out VM :-
  coq.unify-eq U U' ok, !,
  nmod Inv C In1 OutM1 Out1 VM, !,
  build.opp Out1 Out.
% (_ *~ _)%R
nmod Inv (additive _ (some U) _ as C) {{ @intmul lp:U' lp:In1 lp:In2 }}
     {{ @MMulz lp:U lp:OutM1 lp:OutM2 }} Out VM :-
  coq.unify-eq U U' ok, !,
  nmod Inv C In1 OutM1 Out1 VM, !,
  ring Inv rmorphism-int In2 OutM2 Out2 VM, !,
  build.mul Out1 Out2 Out.
% additive functions
nmod Inv (additive U _ _ as C) In OutM Out VM :-
  % TODO: for concrete additive functions, should we unpack [NewMorphInst]?
  NewMorph = (x\ {{ @GRing.Additive.sort lp:V lp:U lp:NewMorphInst lp:x }}),
  coq.unify-eq In (NewMorph In1) ok, !,
  nmod.additive Inv V C NewMorph NewMorphInst In1 OutM Out VM.
% variables
nmod Inv (additive U _ Morph) In {{ @MX lp:U lp:In }} Out VM :-
  mem VM { cond-inv Inv (Morph In) } N, !,
  build.variable { positive-constant {calc (N + 1)} } Out.
nmod _ _ In _ _ _ :- coq.error "Unknown" {coq.term->string In}.

pred nmod.additive i:bool, i:term, i:additive, i:term -> term, i:term, i:term,
                   o:term, o:term, o:list term.
nmod.additive Inv V (additive U _ Morph) NewMorph NewMorphInst In1
              {{ @MnatAdditive lp:U lp:NewMorphInst lp:OutM1 }} Out VM :-
  coq.unify-eq V (global (const { canonical-nat-nmodule })) ok,
  mem VM { cond-inv Inv (Morph (NewMorph {{ 1%N }})) } N, !,
  ring Inv rmorphism-nat In1 OutM1 Out1 VM, !,
  build.mul { build.variable { positive-constant {calc (N + 1)} } } Out1 Out.
nmod.additive Inv V (additive U _ Morph) NewMorph NewMorphInst In1
              {{ @MNAdditive lp:U lp:NewMorphInst lp:OutM1 }} Out VM :-
  coq.unify-eq V (global (const { canonical-N-nmodule })) ok,
  mem VM { cond-inv Inv (Morph (NewMorph {{ 1%num }})) } N, !,
  ring Inv rmorphism-N In1 OutM1 Out1 VM, !,
  build.mul { build.variable { positive-constant {calc (N + 1)} } } Out1 Out.
nmod.additive Inv V (additive U _ Morph) NewMorph NewMorphInst In1
              {{ @MintAdditive lp:U lp:NewMorphInst lp:OutM1 }} Out VM :-
  coq.unify-eq V (global (const { canonical-int-nmodule })) ok,
  mem VM { cond-inv Inv (Morph (NewMorph {{ 1%Z }})) } N, !,
  ring Inv rmorphism-int In1 OutM1 Out1 VM, !,
  build.mul { build.variable { positive-constant {calc (N + 1)} } } Out1 Out.
nmod.additive Inv V (additive U _ Morph) NewMorph NewMorphInst In1
              {{ @MZAdditive lp:U lp:NewMorphInst lp:OutM1 }} Out VM :-
  coq.unify-eq V (global (const { canonical-Z-nmodule })) ok,
  mem VM { cond-inv Inv (Morph (NewMorph {{ Zpos 1 }})) } N, !,
  ring Inv rmorphism-Z In1 OutM1 Out1 VM, !,
  build.mul { build.variable { positive-constant {calc (N + 1)} } } Out1 Out.
nmod.additive Inv V (additive U _ Morph) NewMorph NewMorphInst In1
              {{ @MAdditive lp:V lp:U lp:NewMorphInst lp:OutM1 }} Out1 VM :- !,
  if (coq.unify-eq {{ GRing.Nmodule.sort lp:V }}
                   {{ GRing.Zmodule.sort lp:V' }} ok)
     (V'' = some V') (V'' = none), !,
  nmod Inv (additive V V'' (x\ Morph (NewMorph x))) In1 OutM1 Out1 VM.

% [quote.lra.ring Inv C Input OutM Out VM] reifies an expression [Input]
% under the ring morphism [C]
% - [Inv] if [tt] then [Out] encodes the multiplicative inverse of [Input],
% - [C] stores instances on the carrier type and the (semi)ring homomorphism
%   from it,
% - [Input] is a term of the carrier type,
% - [OutM] is a reified terms of [Input] of type [RExpr C],
%   it is such that [Reval OutM] is exactly [Input],
% - [Out] is a reified term of [Input] built by build.*,
%   it has morphisms pushed inward such that the eval of [Out]
%   is [Lra.Rnorm OutM]
% - [VM] is a variable map.
pred ring i:bool, i:rmorphism, i:term, o:term, o:term, o:list term.
% _ : _
ring Inv C {{ lp:In : _ }} OutM Out VM :- !,
  ring Inv C In OutM Out VM.
% 0%R
ring _ C {{ @GRing.zero lp:U }} {{ @R0 lp:R }} Out _ :-
  coq.unify-eq { rmorphism->nmod C } U ok,
  rmorphism->sring C R, !,
  build.zero Out.
% +%R
ring ff C {{ @GRing.add lp:U lp:In1 lp:In2 }}
     {{ @RAdd lp:R lp:OutM1 lp:OutM2 }} Out VM :-
  coq.unify-eq { rmorphism->nmod C } U ok,
  rmorphism->sring C R, !,
  ring ff C In1 OutM1 Out1 VM, !,
  ring ff C In2 OutM2 Out2 VM, !,
  build.add Out1 Out2 Out.
% addn
ring ff rmorphism-nat {{ addn lp:In1 lp:In2 }}
     {{ @RnatAdd lp:OutM1 lp:OutM2 }} Out VM :- !,
  ring ff rmorphism-nat In1 OutM1 Out1 VM, !,
  ring ff rmorphism-nat In2 OutM2 Out2 VM, !,
  build.add Out1 Out2 Out.
% N.add
ring ff rmorphism-N {{ N.add lp:In1 lp:In2 }}
     {{ @RNAdd lp:OutM1 lp:OutM2 }} Out VM :- !,
  ring ff rmorphism-N In1 OutM1 Out1 VM, !,
  ring ff rmorphism-N In2 OutM2 Out2 VM, !,
  build.add Out1 Out2 Out.
% Z.add
ring ff rmorphism-Z {{ Z.add lp:In1 lp:In2 }}
     {{ @RZAdd lp:OutM1 lp:OutM2 }} Out VM :- !,
  ring ff rmorphism-Z In1 OutM1 Out1 VM, !,
  ring ff rmorphism-Z In2 OutM2 Out2 VM, !,
  build.add Out1 Out2 Out.
% (_ *+ _)%R
ring Inv C {{ @GRing.natmul lp:U lp:In1 lp:In2 }}
     {{ @RMuln lp:R lp:OutM1 lp:OutM2 }} Out VM :-
  coq.unify-eq { rmorphism->nmod C } U ok,
  rmorphism->sring C R, !,
  ring Inv C In1 OutM1 Out1 VM, !,
  ring Inv rmorphism-nat In2 OutM2 Out2 VM, !,
  build.mul Out1 Out2 Out.
% -%R
ring Inv C {{ @GRing.opp lp:U lp:In1 }} {{ @ROpp lp:R lp:OutM1 }} Out VM :-
  coq.unify-eq { rmorphism->zmod C } U ok,
  rmorphism->ring C R, !,
  ring Inv C In1 OutM1 Out1 VM, !,
  build.opp Out1 Out.
% Z.opp
ring Inv rmorphism-Z {{ Z.opp lp:In1 }} {{ @RZOpp lp:OutM1 }} Out VM :- !,
  ring Inv rmorphism-Z In1 OutM1 Out1 VM, !,
  build.opp Out1 Out.
% Z.sub
ring ff rmorphism-Z {{ Z.sub lp:In1 lp:In2 }}
     {{ @RZSub lp:OutM1 lp:OutM2 }} Out VM :- !,
  ring ff rmorphism-Z In1 OutM1 Out1 VM, !,
  ring ff rmorphism-Z In2 OutM2 Out2 VM, !,
  build.sub Out1 Out2 Out.
% (_ *~ _)%R
ring Inv C {{ @intmul lp:U lp:In1 lp:In2 }}
     {{ @RMulz lp:R lp:OutM1 lp:OutM2 }} Out VM :-
  coq.unify-eq { rmorphism->zmod C } U ok,
  rmorphism->ring C R, !,
  ring Inv C In1 OutM1 Out1 VM, !,
  ring Inv rmorphism-int In2 OutM2 Out2 VM, !,
  build.mul Out1 Out2 Out.
% 1%R
ring _ C {{ @GRing.one lp:R' }} {{ @R1 lp:R }} Out _ :-
  rmorphism->sring C R,
  coq.unify-eq R R' ok, !,
  build.one Out.
% *%R
ring Inv C {{ @GRing.mul lp:R' lp:In1 lp:In2 }}
     {{ @RMul lp:R lp:OutM1 lp:OutM2 }} Out VM :-
  rmorphism->sring C R,
  coq.unify-eq R R' ok, !,
  ring Inv C In1 OutM1 Out1 VM, !,
  ring Inv C In2 OutM2 Out2 VM, !,
  build.mul Out1 Out2 Out.
% muln
ring Inv rmorphism-nat {{ muln lp:In1 lp:In2 }}
     {{ @RnatMul lp:OutM1 lp:OutM2 }} Out VM :- !,
  ring Inv rmorphism-nat In1 OutM1 Out1 VM, !,
  ring Inv rmorphism-nat In2 OutM2 Out2 VM, !,
  build.mul Out1 Out2 Out.
% N.mul
ring Inv rmorphism-N {{ N.mul lp:In1 lp:In2 }}
     {{ @RNMul lp:OutM1 lp:OutM2 }} Out VM :- !,
  ring Inv rmorphism-N In1 OutM1 Out1 VM, !,
  ring Inv rmorphism-N In2 OutM2 Out2 VM, !,
  build.mul Out1 Out2 Out.
% Z.mul
ring Inv rmorphism-Z {{ Z.mul lp:In1 lp:In2 }}
     {{ @RZMul lp:OutM1 lp:OutM2 }} Out VM :- !,
  ring Inv rmorphism-Z In1 OutM1 Out1 VM, !,
  ring Inv rmorphism-Z In2 OutM2 Out2 VM, !,
  build.mul Out1 Out2 Out.
% (_ ^+ _)%R
ring Inv C {{ @GRing.exp lp:R' lp:In1 lp:In2 }}
     {{ @RExpn lp:R lp:OutM1 lp:OutM2 }} Out VM :-
  rmorphism->sring C R,
  coq.unify-eq R R' ok,
  quote.n-const In2 OutM2 Out2, !,
  ring Inv C In1 OutM1 Out1 VM, !,
  build.exp Out1 Out2 Out.
% (_ ^ _)%R
ring Inv C {{ @exprz lp:R' lp:In1 lp:In2 }} OutM Out VM :-
  quote.z-const In2 Pos OutM2 Out2,
  rmorphism->uring C R,
  coq.unify-eq R R' ok,
  if (Pos = tt)
     (CONT =
       (!, ring Inv C In1 OutM1 Out1 VM, !,
        OutM = {{ @RExpPosz lp:R lp:OutM1 lp:OutM2 }}, !,
        build.exp Out1 Out2 Out))
     (CONT =
       (rmorphism->field C F, !,
        ring { negb Inv } C In1 OutM1 Out1 VM, !,
        OutM = {{ @RExpNegz lp:F lp:OutM1 lp:OutM2 }}, !,
        build.exp Out1 Out2 Out)),
  CONT.
% expn
ring Inv rmorphism-nat {{ expn lp:In1 lp:In2 }}
     {{ @RnatExpn lp:OutM1 lp:OutM2 }} Out VM :-
  quote.n-const In2 OutM2 Out2, !,
  ring Inv rmorphism-nat In1 OutM1 Out1 VM, !,
  build.exp Out1 Out2 Out.
% N.pow
ring Inv rmorphism-N {{ N.pow lp:In1 lp:In2 }}
     {{ @RNExp lp:OutM1 lp:Out2 }} Out VM :-
  reduction-N In2 Out2, !,
  ring Inv rmorphism-N In1 OutM1 Out1 VM, !,
  build.exp Out1 Out2 Out.
% Z.pow
ring Inv rmorphism-Z {{ Z.pow lp:In1 lp:In2 }}
     {{ @RZExp lp:OutM1 lp:OutM2 }} Out VM :-
  reduction-Z In2 OutM2, !,
  ((OutM2 = {{ Z0 }}, !, Out2 = {{ N0 }}; % If [In2] is non-negative
    OutM2 = {{ Zpos lp:P }}, !, Out2 = {{ Npos lp:P }}), !,
   ring Inv rmorphism-Z In1 OutM1 Out1 VM, !,
   build.exp Out1 Out2 Out;
   build.zero Out). % If [In2] is negative
% _^-1
ring Inv C {{ @GRing.inv lp:R lp:In1 }} {{ @RInv lp:F lp:OutM1 }} Out1 VM :-
  rmorphism->field C F,
  coq.unify-eq { rmorphism->uring C } R ok, !,
  ring { negb Inv } C In1 OutM1 Out1 VM.
% S (..(S ..)..) and nat constants
ring Inv rmorphism-nat {{ lib:num.nat.S lp:In }} OutM Out VM :- !,
  quote.count-succ In N In2,
  if (In2 = {{ lib:num.nat.O }})
     (Cont = (OutM = {{ RnatC (large_nat_N lp:Out1) }}, !,
              build.invN-constant Inv Out1 Out))
     (Inv = ff,
      Cont = (ring ff rmorphism-nat In2 OutM2 Out2 VM, !,
              OutM = {{ RnatS lp:Pos lp:OutM2 }}, !,
              build.add { build.invN-constant ff Out1 } Out2 Out)), !,
  positive-constant {calc (N + 1)} Pos, !,
  Out1 = {{ N.pos lp:Pos }}, !,
  Cont.
ring Inv rmorphism-nat {{ lib:num.nat.O }} {{ RnatC (large_nat_N N0) }} Out _ :-
  !, build.invN-constant Inv {{ N0 }} Out.
ring Inv rmorphism-nat {{ Nat.of_num_uint lp:In }}
     {{ RnatC (large_nat_uint lp:In) }} Out _ :- !,
  ground-uint In, !,
  coq.reduction.vm.norm {{ N.of_num_uint lp:In }} {{ N }} InN, !,
  build.invN-constant Inv InN Out.
% Posz
ring Inv rmorphism-int {{ Posz lp:In }} {{ @RPosz lp:OutM }} Out VM :- !,
  ring Inv rmorphism-nat In OutM Out VM.
% Negz
ring ff rmorphism-int {{ Negz lp:In }} {{ RNegz lp:OutM1 }} Out VM :- !,
  ring ff rmorphism-nat In OutM1 Out1 VM, !,
  build.opp { build.add { build.one } Out1 } Out.
% N constants
ring Inv rmorphism-N In {{ @RNC lp:In }} Out _ :-
  ground-N In, !, build.invN-constant Inv In Out.
% Z constants
ring Inv rmorphism-Z In {{ @RZC lp:In }} Out _ :-
  ground-Z In, !, build.invZ-constant Inv In Out.
% morphisms
ring Inv C In OutM Out VM :-
  rmorphism->sring C R,
  % TODO: for concrete additive functions, should we unpack [NewMorphInst]?
  NewMorph = (x\ {{ @GRing.RMorphism.sort lp:S lp:R lp:NewMorphInst lp:x }}),
  coq.unify-eq In (NewMorph In1) ok, !,
  ring.rmorphism Inv S C NewMorph NewMorphInst In1 OutM Out VM.
% additive functions
ring Inv C In OutM Out VM :-
  rmorphism->nmod C U,
  % TODO: for concrete additive functions, should we unpack [NewMorphInst]?
  NewMorph = (x\ {{ @GRing.Additive.sort lp:V lp:U lp:NewMorphInst lp:x }}),
  coq.unify-eq In (NewMorph In1) ok, !,
  ring.additive Inv V C NewMorph NewMorphInst In1 OutM Out VM.
% variables
ring Inv C In {{ @RX lp:R lp:In }} Out VM :- !,
  rmorphism->sring C R, rmorphism->morph C Morph,
  mem VM { cond-inv Inv (Morph In) } N, !,
  build.variable { positive-constant {calc (N + 1)} } Out.
ring _ _ In _ _ _ :- coq.error "Unknown" {coq.term->string In}.
% TODO: converse ring

pred ring.rmorphism.aux i:term, i:term -> term, o:rmorphism.
ring.rmorphism.aux SR Morph (rmorphism U V' SR R' UR' F' Morph) :- !,
  Sort = {{ GRing.PzSemiRing.sort lp:SR }},
  coq.unify-eq Sort {{ GRing.Nmodule.sort lp:U }} ok,
  if (target-zmodule _, coq.unify-eq Sort {{ GRing.PzRing.sort lp:R }} ok,
      coq.unify-eq Sort {{ GRing.Zmodule.sort lp:V }} ok)
     (V' = some V, R' = some R,
      if (coq.unify-eq Sort {{ GRing.UnitRing.sort lp:UR }} ok)
         (UR' = some UR,
          if (field-mode, coq.unify-eq Sort {{ GRing.Field.sort lp:F }} ok)
             (F' = some F) (F' = none))
         (UR' = none, F' = none))
     (V' = none, R' = none, UR' = none, F' = none).

pred ring.rmorphism i:bool, i:term, i:rmorphism, i:term -> term, i:term, i:term,
                    o:term, o:term, o:list term.
ring.rmorphism Inv S C _ NewMorphInst In1
               {{ @RnatMorph lp:R lp:NewMorphInst lp:OutM1 }} Out1 VM :-
  coq.unify-eq S (global (const { canonical-nat-semiring })) ok, !,
  rmorphism->sring C R, !,
  ring Inv rmorphism-nat In1 OutM1 Out1 VM.
ring.rmorphism Inv S C _ NewMorphInst In1
               {{ @RNMorph lp:R lp:NewMorphInst lp:OutM1 }} Out1 VM :-
  coq.unify-eq S (global (const { canonical-N-semiring })) ok, !,
  rmorphism->sring C R, !,
  ring Inv rmorphism-N In1 OutM1 Out1 VM.
ring.rmorphism Inv S C _ NewMorphInst In1
               {{ @RintMorph lp:R lp:NewMorphInst lp:OutM1 }} Out1 VM :-
  coq.unify-eq S (global (const { canonical-int-semiring })) ok, !,
  rmorphism->sring C R, !,
  ring Inv rmorphism-int In1 OutM1 Out1 VM.
ring.rmorphism Inv S C _ NewMorphInst In1
               {{ @RZMorph lp:R lp:NewMorphInst lp:OutM1 }} Out1 VM :-
  coq.unify-eq S (global (const { canonical-Z-semiring })) ok, !,
  rmorphism->sring C R, !,
  ring Inv rmorphism-Z In1 OutM1 Out1 VM.
ring.rmorphism Inv S C NewMorph NewMorphInst In1
               {{ @RMorph lp:S lp:R lp:NewMorphInst lp:OutM1 }} Out1 VM :- !,
  rmorphism->sring C R, !,
  rmorphism->morph C Morph, !,
  ring.rmorphism.aux S (x\ Morph (NewMorph x)) C', !,
  ring Inv C' In1 OutM1 Out1 VM.

pred ring.additive i:bool, i:term, i:rmorphism, i:term -> term, i:term, i:term,
                   o:term, o:term, o:list term.
ring.additive Inv V C NewMorph NewMorphInst In1
              {{ @RnatAdditive lp:R lp:NewMorphInst lp:OutM1 }} Out VM :-
  coq.unify-eq V (global (const { canonical-nat-nmodule })) ok,
  rmorphism->sring C R, rmorphism->morph C Morph,
  mem VM { cond-inv Inv (Morph (NewMorph {{ 1%N }})) } N, !,
  ring Inv rmorphism-nat In1 OutM1 Out1 VM, !,
  build.mul { build.variable { positive-constant {calc (N + 1)} } } Out1 Out.
ring.additive Inv V C NewMorph NewMorphInst In1
              {{ @RNAdditive lp:R lp:NewMorphInst lp:OutM1 }} Out VM :-
  coq.unify-eq V (global (const { canonical-N-nmodule })) ok,
  rmorphism->sring C R, rmorphism->morph C Morph,
  mem VM { cond-inv Inv (Morph (NewMorph {{ 1%num }})) } N, !,
  ring Inv rmorphism-N In1 OutM1 Out1 VM, !,
  build.mul { build.variable { positive-constant {calc (N + 1)} } } Out1 Out.
ring.additive Inv V C NewMorph NewMorphInst In1
              {{ @RintAdditive lp:R lp:NewMorphInst lp:OutM1 }} Out VM :-
  coq.unify-eq V (global (const { canonical-int-nmodule })) ok,
  rmorphism->sring C R, rmorphism->morph C Morph,
  mem VM { cond-inv Inv (Morph (NewMorph {{ 1%Z }})) } N, !,
  ring Inv rmorphism-int In1 OutM1 Out1 VM, !,
  build.mul { build.variable { positive-constant {calc (N + 1)} } } Out1 Out.
ring.additive Inv V C NewMorph NewMorphInst In1
              {{ @RZAdditive lp:R lp:NewMorphInst lp:OutM1 }} Out VM :-
  coq.unify-eq V (global (const { canonical-Z-nmodule })) ok,
  rmorphism->sring C R, rmorphism->morph C Morph,
  mem VM { cond-inv Inv (Morph (NewMorph {{ Zpos 1 }})) } N, !,
  ring Inv rmorphism-Z In1 OutM1 Out1 VM, !,
  build.mul { build.variable { positive-constant {calc (N + 1)} } } Out1 Out.
ring.additive Inv V C NewMorph NewMorphInst In1
              {{ @RAdditive lp:V lp:R lp:NewMorphInst lp:OutM1 }} Out1 VM :- !,
  rmorphism->sring C R, rmorphism->morph C Morph,
  if (coq.unify-eq {{ GRing.Nmodule.sort lp:V }}
                   {{ GRing.Zmodule.sort lp:V' }} ok)
     (V'' = some V') (V'' = none), !,
  nmod Inv (additive V V'' (x\ Morph (NewMorph x))) In1 OutM1 Out1 VM, !.

}

% [quote.exprw C In OutM Out VM] reifies arithmetic expressions
% (should be instantiated by each tactic call)
% - [C] is the carrier type and structure instances,
% - [In] is a term of type [C],
% - [OutM] is a reified expression of type [RExpr C],
% - [Out] is a reified expression of type [PExpr Q], and
% - [VM] is a variable map, that is a list of terms of type [C].
pred exprw i:carrier, i:term, o:term, o:term, o:list term.

% [quote.bop2 C In OutM Out VM] reifies boolean (in)equalities
% - [C] is the carrier type and structure instances,
% - [In] is a term of type [bool],
% - [OutM] is a reified expression of type [RFormula C],
% - [Out] is a reified expression of type [Formula Q], and
% - [VM] is a variable map, that is a list of terms of type [C].
pred bop2 i:carrier, i:term, o:term, o:term, o:list term.
bop2 C {{ @Order.le _ lp:O lp:X lp:Y }}
     {{ Build_RFormula lp:XM' OpLe lp:YM' }}
     {{ Build_Formula lp:X' OpLe lp:Y' }} VM :-
  coq.unify-eq { carrier->porder C } O ok, !,
  exprw C X XM' X' VM, !, exprw C Y YM' Y' VM.
bop2 C {{ @Order.lt _ lp:O lp:X lp:Y }}
     {{ Build_RFormula lp:XM' OpLt lp:YM' }}
     {{ Build_Formula lp:X' OpLt lp:Y' }} VM :-
  coq.unify-eq { carrier->porder C } O ok, !,
  exprw C X XM' X' VM, !, exprw C Y YM' Y' VM.
bop2 C {{ @eq_op lp:T lp:X lp:Y }}
     {{ Build_RFormula lp:XM' OpEq lp:YM' }}
     {{ Build_Formula lp:X' OpEq lp:Y' }} VM :-
  coq.unify-eq { carrier->eq C } T ok, !,
  exprw C X XM' X' VM, !, exprw C Y YM' Y' VM.

% [quote.pop2 C In OutM Out VM] reifies (in)equalities of type Prop
% - [C] is the carrier type and structure instances,
% - [In] is a term of type [Prop],
% - [OutM] is a reified expression of type [RFormula C],
% - [Out] is a reified expression of type [Formula Q], and
% - [VM] is a variable map, that is a list of terms of type [C].
pred pop2 i:carrier, i:term, o:term, o:term, o:list term.
pop2 C {{ is_true lp:E }} OutM Out VM :- bop2 C E OutM Out VM.
pop2 C {{ @eq lp:T lp:X lp:Y }}
     {{ Build_RFormula lp:XM' OpEq lp:YM' }}
     {{ Build_Formula lp:X' OpEq lp:Y' }} VM :-
  coq.unify-eq { carrier->type C } T ok, !,
  exprw C X XM' X' VM, !, exprw C Y YM' Y' VM.

% [quote.boolean C In OutM Out VM] reifies boolean formulas
% - [C] is the carrier type and structure instances,
% - [In] is a term of type [bool],
% - [OutM] is a reified formula of type [BFormula (RFormula C) isBool],
% - [Out] is a reified formula of type [BFormula (Formula Q) isBool], and
% - [VM] is a variable map, that is a list of terms of type [C].
pred boolean i:carrier, i:term, o:term, o:term, o:list term.
boolean C {{ lp:In1 ==> lp:In2 }} OutM Out VM :- !, std.do!
  [boolean C In1 OutM1 Out1 VM, boolean C In2 OutM2 Out2 VM,
   build.implb OutM1 OutM2 OutM, build.implb Out1 Out2 Out].
boolean C {{ lp:In1 && lp:In2 }} OutM Out VM :- !, std.do!
  [boolean C In1 OutM1 Out1 VM, boolean C In2 OutM2 Out2 VM,
   build.andb OutM1 OutM2 OutM, build.andb Out1 Out2 Out].
boolean C {{ lp:In1 || lp:In2 }} OutM Out VM :- !, std.do!
  [boolean C In1 OutM1 Out1 VM, boolean C In2 OutM2 Out2 VM,
   build.orb OutM1 OutM2 OutM, build.orb Out1 Out2 Out].
boolean C {{ ~~ lp:In1 }} OutM Out VM :- !, std.do!
  [boolean C In1 OutM1 Out1 VM, build.negb OutM1 OutM, build.negb Out1 Out].
boolean _ {{ true }} {{ TT isBool }} {{ TT isBool }} _ :- !.
boolean _ {{ false }} {{ FF isBool }} {{ FF isBool }} _ :- !.
boolean C In {{ A isBool lp:OutM tt }} {{ A isBool lp:Out tt }} VM :-
  bop2 C In OutM Out VM.
boolean _ In {{ X isBool lp:In }} {{ X isBool lp:In }} _ :- !.

% [quote.proposition C In OutM Out VM] reifies formulas of type Prop
% - [C] is the carrier type and structure instances,
% - [In] is a term of type [Prop],
% - [OutM] is a reified formula of type [BFormula (RFormula C) isProp],
% - [Out] is a reified formula of type [BFormula (Formula Q) isProp], and
% - [VM] is a variable map, that is a list of terms of type [C].
pred proposition i:carrier, i:term, o:term, o:term, o:list term.
proposition C {{ lp:In1 -> lp:In2 }} OutM Out VM :- !, std.do!
  [proposition C In1 OutM1 Out1 VM, proposition C In2 OutM2 Out2 VM,
   build.implp OutM1 OutM2 OutM, build.implp Out1 Out2 Out].
proposition C {{ iff lp:In1 lp:In2 }} OutM Out VM :- !, std.do!
  [proposition C In1 OutM1 Out1 VM, proposition C In2 OutM2 Out2 VM,
   build.iffp OutM1 OutM2 OutM, build.iffp Out1 Out2 Out].
proposition C {{ lp:In1 /\ lp:In2 }} OutM Out VM :- !, std.do!
  [proposition C In1 OutM1 Out1 VM, proposition C In2 OutM2 Out2 VM,
   build.andp OutM1 OutM2 OutM, build.andp Out1 Out2 Out].
proposition C {{ lp:In1 \/ lp:In2 }} OutM Out VM :- !, std.do!
  [proposition C In1 OutM1 Out1 VM, proposition C In2 OutM2 Out2 VM,
   build.orp OutM1 OutM2 OutM, build.orp Out1 Out2 Out].
proposition C {{ ~ lp:In1 }} OutM Out VM :- !, std.do!
  [proposition C In1 OutM1 Out1 VM, build.negp OutM1 OutM, build.negp Out1 Out].
proposition _ {{ True }} {{ TT isProp }} {{ TT isProp }} _ :- !.
proposition _ {{ False }} {{ FF isProp }} {{ FF isProp }} _ :- !.
proposition C {{ is_true lp:In1 }}
           {{ EQ lp:OutM1 (TT isBool) }} {{ EQ lp:Out1 (TT isBool) }} VM :- !,
  boolean C In1 OutM1 Out1 VM, !.
proposition C {{ @eq lp:Bool lp:In1 lp:In2 }} OutM Out VM :-
  coq.unify-eq Bool {{ bool }} ok, !,
  boolean C In1 OutM1 Out1 VM, !, boolean C In2 OutM2 Out2 VM, !,
  OutM = {{ EQ lp:OutM1 lp:OutM2 }}, !, Out = {{ EQ lp:Out1 lp:Out2 }}.
proposition C In {{ A isProp lp:OutM tt }} {{ A isProp lp:Out tt }} VM :-
  pop2 C In OutM Out VM.
proposition _ In {{ X isProp lp:In }} {{ X isProp lp:In }} _ :- !.

% [quote.goal C Ctx Goal Goal' NS OutM Out VM] reifies the goal [Goal],
% including the arithmetic hypotheses in the context [Ctx], in the form of
% implication chain
% - [C] is the carrier type and structure instances,
% - [Ctx] is the context (hypotheses),
% - [Goal] is the goal, of type [Prop],
% - [Goal'] is a chain of implications including [Goal] and hypotheses in [Hyps]
%   that have some arithmetic contents,
% - [NS] are the names of arithmetic hypotheses in [Ctx] added to [Goal'],
% - [OutM] is the reified term of type [BFormula (RFormula C) isProp],
% - [ReifiedOut] is the reified term of type [BFormula (Formula Q) isProp], and
% - [VM] is a variable map, that is a list of terms of type [C].
pred goal i:carrier, i:list prop, i:term,
          o:term, o:list term, o:term, o:term, o:list term.
goal C [decl N _ In1|Ctx] Type {{ lp:In1 -> lp:Type' }} [N|NS]
           {{ IMPL lp:OutM1 None lp:OutM2 }}
           {{ IMPL lp:Out1 None lp:Out2 }} VM :-
  proposition C In1 OutM1 Out1 VM, not (Out1 = {{ X _ _ }}), !,
  goal C Ctx Type Type' NS OutM2 Out2 VM.
goal C [_|Ctx] Type Type' NS OutM Out VM :- !,
  goal C Ctx Type Type' NS OutM Out VM.
goal C [] Type Type [] OutM Out VM :- !, proposition C Type OutM Out VM.

}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Main tactic

% [exfalso_if_not_prop In Out Bool] changes [In] to [False]
% when [In] is not a [Prop] (and then set [Bool] to [tt])
pred exfalso_if_not_prop i:term, o:term, o:bool.
exfalso_if_not_prop Type Type ff :- coq.typecheck Type {{ Prop }} ok.
exfalso_if_not_prop _ {{ False }} tt.

pred gen-witness i:string, i:argument, i:term, i:goal, o:sealed-goal.
gen-witness TacW N Out G G' :- coq.ltac.call TacW [N, trm Out] G [G'].
gen-witness _ _ _ _ _ :- coq.ltac.fail 0 "Cannot find witness".

pred lra-reflection i:string, i:term, i:term, i:term, i:term, i:term,
                    i:goal, i:sealed-goal, o:list sealed-goal.
lra-reflection Tac C Hyps OutM Out VM G G' GS :-
  coq.ltac.set-goal-arguments
    [trm C, trm Hyps, trm OutM, trm Out, trm VM] G G' G'',
  coq.ltac.open (g\ gs\ sigma Wit Args Args'\
    % NB: the following line is very specific to the current implementation of
    % the witness generators. We assume that the witness appears as the first
    % item of the context.
    g = goal [def Wit _ _ _|_] _ _ _ Args,
    std.append Args [trm Wit] Args',
    coq.ltac.call Tac Args' g gs) G'' GS.
lra-reflection _ _ _ _ _ _ _ _ _ :-
  coq.ltac.fail 0 "Reflection failed, this is a bug".

% The tactic takes four arguments:
% - [TacW] is the name of the Ltac1 tactic that generates the witness,
% - [TacF] and [TacR] are the names of the Ltac1 tactics to call respectively
%   in the [realFieldType] and [realDomainType] cases, and
% - [N] is passed as is as the first argument of [TacW].
% The [TacW] tactic will receive [N] and the reified term [Out], explained
% below, and the [TacF] or [TacR] tactic will receive six arguments:
% - [N] above,
% - [Hyps] a function of type
%   [(H1 -> ... -> Hn -> G) -> G] (if [G] is a [Prop]) or
%   [(H1 -> ... -> Hn -> False) -> G] (if [G] is not a [Prop])
%   that explicitly passes hypotheses of types [H1], ..., [Hn] taken from the
%   context to the reflexive proof,
% - [OutM] the reified goal as a [BFormula RFormula isProp],
% - [Out] the reified goal as a [BFormula (Formula Q) isProp], and
% - [VM'] a variable map, giving the interpretation to variables in [Out]
%   it is of type [VarMap.t C] where [C] is the carrier for the detected
%   [realFieldType] or [realDomainType].
solve (goal Ctx _ Type _ [str TacW, str TacF, str TacR, N] as G) GS :- std.do! [
  exfalso_if_not_prop Type Type' Efalso,
  rfstr Ctx Type' C Env,
  Env => quote.goal C Ctx Type' Type'' NS OutM Out VM,
  carrier->ring C R,
  std.assert-ok!
    (coq.typecheck OutM {{ BFormula (@RFormula lp:R) isProp }})
    "The reification produced an ill-typed result, this is a bug",
  std.assert-ok!
    (coq.typecheck Out {{ BFormula (Formula Q) isProp }})
    "The reification produced an ill-typed result, this is a bug",
  gen-witness TacW N Out G G',
  list-constant { carrier->type C } VM VM',
  if (Efalso = tt)
     (Hyps = fun _ Type'' (x \ app [{{ False_rect }}, Type, app [x|NS]]))
     (Hyps = fun _ Type'' (x \ app [x|NS])),
  ((carrier->realField C C', Tac = TacF);
   (carrier->realDomain C C', Tac = TacR)),
  lra-reflection Tac C' Hyps OutM Out VM' G G' GS ].
